- name: Configure access to PostgreSQL Cluster
  hosts: psql_cluster

  tasks:
  - name: Config postgres to accept outbound connections
    ansible.builtin.lineinfile:
      path: "{{pg.data_dir}}/postgresql.conf"
      regexp: '^(#l|l)isten_addresses'
      line: listen_addresses='*'
    notify:
    - restart postgres
    tags:
    - initialization
    - test

  - name: Config postgres to accept outbound connections
    ansible.builtin.lineinfile:
      path: "{{pg.data_dir}}/postgresql.conf"
      regexp: '^(#p|p)assword_encryption'
      line: password_encryption = {{pg.auth_method}}
    notify:
    - restart postgres
    tags: 
    - initialization
    - test

  - name: Create a new database with name "{{db.name}}"
    community.postgresql.postgresql_db:
      name: "{{ db.name }}"
      #encoding: UTF-8
      state: present
    tags:
    - access
    - test

  - name: Create rails user, set MD5-hashed password, grant privs
    community.postgresql.postgresql_user:
      db: "{{ db.name }}"
      name: "{{ db.user }}"
      password: "{{ db.password }}"
      role_attr_flags: CREATEDB,NOSUPERUSER
    environment:
      PGOPTIONS: "-c password_encryption=scram-sha-256"
    tags:
    - access
    - test

  - name: GRANT ALL PRIVILEGES ON SCHEMA public, math TO librarian
    community.postgresql.postgresql_privs:
      db: "{{ db.name }}"
      privs: ALL
      type: table
      objs: "{{ db.name }}"
      role: "{{ db.user }}"
    tags:
    - access
    - test

  - name: Grant user replication from network/host {{access.network}}/{{access.mask}}
    community.postgresql.postgresql_pg_hba:
      dest: "{{pg.data_dir}}/pg_hba.conf"
      contype: host
      users: "{{db.user}}"
      source: "{{access.network}}/{{access.mask}}"
      databases: "{{ db.name }}"
      method: "{{pg.auth_method}}"
    tags:
    - access
    - test

  - name: Create initial script directory "{{pg.data_dir}}/{{pg.scripts_dir_name}}"
    ansible.builtin.file:
      path: "{{pg.data_dir}}/{{pg.scripts_dir_name}}"
      state: directory
      owner: "{{pg.user}}"
      group: "{{pg.group}}"
    tags:
    - access
    - test      

  - name: Copy initial script to server dir
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: "{{pg.data_dir}}/{{pg.scripts_dir_name}}"
      owner: "{{pg.user}}"
      group: "{{pg.group}}"
      mode: '0644'
    with_fileglob:
      - "initial_scripts/*"  
    tags:
    - access
    - test    

  - name: Get all scripts names for run
    ansible.builtin.find:
      path: "{{pg.data_dir}}/{{pg.scripts_dir_name}}"
    register: db_scripts
    ignore_errors: true
    tags:
    - access
    - test

  - name: Run init script
    community.postgresql.postgresql_script:
      db: "{{ db.name }}"
      path: "{{ item.path }}"
      encoding: UTF-8
    loop: "{{db_scripts.files}}"
    tags:
    - access
    - test

  handlers:
  - name: Restart postgres
    ansible.builtin.service:
      name: postgresql
      state: reloaded
    become: true
